\score.show
\score.animate
% create the staves for the instruments
\insts right left pedal
% group them is you want
\group \right \left \pedal

% create an OSC client for the AI model
\osc nn
\nn.setup 9010

% list your MIDI ports and open the port you want for all staves
\listmidiports
\right.midiport 1 % change port number if necessary
\left.midiport 1
\pedal.midiport 1

% open the MIDI channels you want for each staff
\right.midichan 1
\left.midichan 2
\pedal.midichan 3

% open some stops, determine which stops you want to open, the ones below are just an example
\pgmchange 1 3 2
\pgmchange 1 1 2
\pgmchange 1 2 2
\pgmchange 1 8 0

% if you want to use a clicktrack (one is provided as a Pure Data patch in this repository)
% execute the group of lines below
\osc pd
\pd.setup 127.0.0.1 9001
\function sendbeat {
    \pd send /beat \beatcount
}
\sendbeat.bind beat

\barcount show

% to generate music content with Notochord, send the followint arguments
% number of bars to generate as a loop
% name of composer (actually LiveLily file, .lyv)
% can't remember, have to check
% approximate number of notes for computer-controlled instrument
% approximate number of notes for human performer
% (optional) "r" character for recursively using AI model's output to generate consecutive bars
\nn.send /generate 4 "composer-name" 21 30 "r"

% execute the line below if you want the AI model to generate music based on its previous output
% arguments are
% nuber of bars
% approximate number of notes for computer-controlled instrument
% approximate number of notes for human performer
\nn.send /generate 4 20 10

% play or stop the score
\play
\stop

% quit the Python script before quitting LiveLily
\nn.send /quit 1
